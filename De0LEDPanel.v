
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module De0LEDPanel(

	//////////// CLOCK //////////
	CLOCK_50,

	//////////// LED //////////
	LED,

	//////////// KEY //////////
	KEY,

	//////////// FRAME ///////////
	FRAME,
	COL,
	
//	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	RED,
	GREEN,
	BLUE,
	A,
	OE,
	LATCH,
	CLK
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;

//////////// LED //////////
output		     [7:0]		LED;

//////////// KEY //////////
input 		     [1:0]		KEY;

//////////// FRAME //////////
output							FRAME;
output							COL;

//////////// LED PANEL signals //////////////
output			  [1:0]		RED;			//	RED[0] 	= GPIO31, RED[1] 	 = GPIO21
output			  [1:0]		GREEN;		//	GREEN[0] = GPIO33, GREEN[1] = GPIO23
output			  [1:0]		BLUE;			//	BLUE[0]	= GPIO32, BLUE[1]	 = GPIO22
output			  [3:0]		A;				//	GPIO_24..GPIO27 = A0 .. A3
output			  				CLK;			//	GPIO28
output							LATCH;		//	GPIO29
output							OE;			//	GPIO30


//=======================================================
//  REG/WIRE declarations
//=======================================================

	wire 							clk100,
									clk50,
									clk25,
									clk10;

	wire							actual_front_buffer, requested_front_buffer;

	wire			[23:0]		wr_data;
	wire			[10:0]		wr_addr;
	wire							wr_ena;
	wire			[23:0]		rd_data_hi, rd_data_lo;
	wire			[10:0]		rd_addr;
	
//=======================================================
//  Structural coding
//=======================================================

//	Instantiate the PLL to generate a couple of new clocks
	pll	pll(
		.inclk0(CLOCK_50),
		.c0(clk100),
		.c1(clk50),
		.c2(clk25),
		.c3(clk10)
	);

//	Instantiate the memory wrapper
	ext_mem		memory(
		.clk(clk100),
		.wr_addr(wr_addr),
		.wr_data(wr_data),
		.wr_ena(wr_ena),
		.rd_addr(rd_addr),
		.rd_data_hi(rd_data_hi),
		.rd_data_lo(rd_data_lo),
		.actual_buffer(!actual_front_buffer)	//	DO not update on front buffer, only on back buffer
	);
	
//	Instantiate the LED Panel driver
	led_panel	led_panel (
		.clk(clk50),
		.rst(KEY[0]),
		.RED(RED),
		.GREEN(GREEN),
		.BLUE(BLUE),
		.A(A),
		.LE(LATCH),
		.OE_N(OE),
		.CLK(CLK),
		
		.selected_buffer(requested_front_buffer),			//	Use this signal to request the new front buffer
		.actual_buffer(actual_front_buffer),		//	THis is the actual front buffer
		
		.rd_addr(rd_addr),
		.rd_data_hi(rd_data_hi),
		.rd_data_lo(rd_data_lo),
		
		//	DEBUG SIGNALS
		.frame_start(FRAME),
		.col_start(COL)
	);
	
	cpu cpu(
		.clk_clk(clk50),                            //                         clk.clk
		.pio_led_external_connection_export(LED), // pio_led_external_connection.export
		.reset_reset_n(KEY[0]),                       //                       reset.reset_n
		.pio_wr_addr_connection_export(wr_addr),
		.pio_wr_data_connection_export(wr_data),
		.pio_wr_in_flags_export( {actual_front_buffer, 7'b0}),
		.pio_wr_out_flags_export({wr_ena, requested_front_buffer,6'b0})
	);

//	Instantiate the automatic dimmer module
/*	dimmer	dimmer(
		.clk(clk50),
		.rst(KEY[0]),
		.trigger(KEY[1]),
		.wr_addr(wr_addr),
		.wr_data(wr_data),
		.wr_ena(wr_ena),
		.selected_buffer(selected_buffer),
		.actual_buffer(actual_buffer)
	);*/
endmodule
